#Notifications

--example1:

from datetime import datetime
from airflow import DAG
from airflow.operators.dummy_operator import DummyOperator

default_args = {
	'owner': 'hdu',
	'start_date': datetime(2024,11,20),
	'email_on_failure': False,
	'email': ['noreply@gmail.com'],
	'retries': 1
	}

with DAG('sample_dag_noti',
	default_args=default_args,
	schedule_interval='@daily',
	catchup=False) as dag:

	wont_email = DummyOperator(
	   task_id='wont_email'
	)

	will_email = DummyOperator(
	   task_id = 'will_email',
	   email_n_failure=True
	)

---------------------
--example 2:

from datetime import datetime
from airflow import DAG
from airflow.operators.dummy import DummyOperator
from airflow.operators.bash import BashOperator
from airflow.operators.python import PythonOperator

def custom_failure_function(context):
	"Define custom failure notification behaviour"
	dag_run = context.get('dag_run')
	task_instances = dag_run.get_task_instances()
	print("These task instances failed:", task_instances)

def custom_success_function(context):
	"Define custom success notification behaviour"
	dag_run = context.get('dag_run')
	task_instances = dag_run.get_task_instances()
    #details = dag_run.details()
	print("These task instances succeeded:","\n", task_instances)
	#print("These are details:", details)

default_args = {
	'owner': 'hdu',
	'start_date': datetime(2024,11,20),
	'on_failure_callback': custom_failure_function,
	'retries': 1
	}

def calculating(ti):
    num1 = ti.xcom_pull(task_ids='get_num', key = 'first_num')
    print(num1 * 100)

def get_num(ti):
        ti.xcom_push(key='first_num', value=25)
		
with DAG('sample_dag_noti2',
	default_args=default_args,
	schedule_interval='@daily',
	catchup=False) as dag:

	failure_task = DummyOperator(
	   task_id='failure_task')

	success_task = DummyOperator(
        task_id = 'Success_task',
        on_success_callback=custom_success_function
	)                                                                              
    
	task2 = PythonOperator(
        task_id = 'calculating',
        python_callable=calculating
	)

	task3 = PythonOperator(
              task_id = 'get_num',
              python_callable=get_num
	)    
    
failure_task >> task3 >> task2 >> success_task

<optional>
email notifications are built-in airflow functionality
To use them , simply configure an SMTP server

[smtp]
smtp_host = your-smptp-host.com
smtp_starttls = True
smtl_ssl = False

smtp_port = 587
smtp_mail_from = noreply@gmail.com

<optional ends>
===========================


#SLAs

from datetime import datetime,timedelta
import time
from airflow import DAG
from airflow.operators.dummy import DummyOperator
from airflow.operators.python import PythonOperator

def my_custom_func(ts,**kwargs):
	print("task is sleeping")
	time.sleep(40)

default_args = {
	'owner': 'hdu',
	'depends_on_past': False,
	'email_on_failure': True,
	'email': 'xxxx',
	'email_on_retry': False,
	'retries': 1,
	'retry_delay': timedelta(minutes=5),
	'sla': timedelta(seconds=30)}

with DAG('sample_dag_sla',
	start_date=datetime(2024,11,20),
	default_args=default_args,
	max_active_runs = 1,
	schedule_interval=timedelta(minutes=2),
	catchup=False
	) as dag:

	t0 = DummyOperator(
	task_id='start',
	#sla=timedelta(seconds=50)
	
    )
	
	t1 = DummyOperator(
	task_id='end',
	#sla=timedelta(seconds=500)
	
    )

	sla_task = PythonOperator(
	task_id='sla_task',
	python_callable=my_custom_func,
	#sla=timedelta(seconds=5)	
	
    )

t0 >> sla_task >> t1
-----
