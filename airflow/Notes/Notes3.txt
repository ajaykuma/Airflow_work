#EX1:
AIRFLOW_HOME/dags/

create 1-sample-dag.py

---
from airflow import DAG
from datetime import datetime, timedelta
from airflow.operators.bash import BashOperator

#create instaance of DAG using 'with'


#define common parameters which will be to initialize the operatr in default
default_args = {

    'owner': 'hdu',
    'retries': 5,
    'retry_delay': timedelta(minutes=2)

}

with DAG (

    dag_id = 'sample_dag_v0',
    description = 'Testing sample dag',
    default_args=default_args,
    start_date=datetime(2024,1,20,2),
    schedule_interval='@daily'

) as dag:
    task1 = BashOperator(
        task_id ='1st_task',
        bash_command='echo hello wrld, this is the first DAG '
    )

task1

---

copy this into AIRFLOW_HOME/dags/

restart airflow

Now check if DAG shows up in UI.
--We can unpause DAG and watch the status or for more info
   --Browse > Dag runs > success > look in logs
   --or look into logs in AIRFLOW_HOME/logs/<dag-id>

from command line:
airflow dags list
pip install graphviz
airflow dags show sample_dag_v5
==============

#EX2:
#add more tasks to the DAG & change DAG ID
 dag_id = 'sample_dag_v1'

#tasks
    task2 = BashOperator(
        task_id ='2nd_task',
        bash_command='echo I am second task and will run after first task '
    )

    task3 = BashOperator(
        task_id ='3rd_task',
        bash_command='echo I am third task and will run after first task '
    )

    #First method to set dependencies
    task1.set_downstream(task2)
    task1.set_downstream(task3)

save and refresh the UI..
Test running of DAG and sequence of tasks

#Optional
#Note: change dag id accordingly to keep multiple versions
#Other options to set dependencies
    #second method using bit shift operator
    #task1 >> task2
    #task1 >> task3

    #third method
    task1 >> [task2,task3]

===============
#Ex3:
--Using Python operator
from airflow import DAG
from datetime import datetime, timedelta
from airflow.operators.python import PythonOperator

default_args = {

    'owner': 'hdu',
    'retries': 5,
    'retry_delay': timedelta(minutes=5)
}

def greet():
    print("Hello world")


with DAG (

    dag_id = 'sample_dag_with_python_operator_v0',
    description = 'Testing sample dag with python operator',
    default_args=default_args,
    start_date=datetime(2024,11,20,2),
    schedule_interval='@daily'

) as dag:
    task1 = PythonOperator(
        task_id ='greet',
        python_callable=greet
    )

    task1

-----------------

Optional :
--we can pass paramters to python functions 
def greet(name,age):
    print(f"Hello world, my name is {name},"
          f" and I am {age} years old")


and update in task
    task1 = PythonOperator(
        task_id ='greet',
        python_callable=greet,
        op_kwargs={'name': 'John', 'age': 25}
    )

--------------------











